{"version":3,"sources":["index.tsx","App.tsx","components/Splitters/index.tsx","components/Splitters/Splitter.tsx","components/Splitters/Pane.tsx","components/Splitters/HandleBar.tsx","components/Splitters/Helpers.ts"],"names":["React","__webpack_require__","ReactDOM","App_1","render","createElement","default","document","getElementById","Splitters_1","App","_super","_this","apply","this","arguments","state","maxPrimaryPane","split","setState","onDragFinishedCallback","console","log","paneWrapper","panePrimary","div","clientWidth","paneNotPrimary","clientHeight","__extends","prototype","className","position","maximizedPrimaryPane","minimalizedPrimaryPane","onDragFinished","ref","node","primaryPaneMaxWidth","primaryPaneMinWidth","primaryPaneWidth","dispatchResize","postPoned","allowResize","Component","exports","Splitter_1","Splitter","Pane_1","HandleBar_1","Helpers_1","props","call","handleMouseDown","e","button","handleBarOffsetFromParent","clientX","clientY","target","currentTarget","type","touches","Children","count","children","getSize","offsetTop","offsetLeft","isDragging","addEventListener","handleMouseMove","unselectAll","_a","maxMousePosition","_b","primaryPaneMinHeight","primaryPanePosition","getPrimaryPaneWidth","handleBarClonePosition","lastX","lastY","isVisible","primaryPane","handleMouseUp","removeEventListener","window","dispatchEvent","Event","cX","cY","nodeWrapperSize","primaryPaneOffset","wrapper","getBoundingClientRect","getDivInstance","handleBarSize","handlebar","posInHandleBar","left","top","regEx","RegExp","maxWidthStr","match","toLowerCase","maxWidthNum","parseFloat","width","Math","floor","maxHeightStr","primaryPaneMaxHeight","maxHeightNum","height","componentDidMount","paneStyle","handlebarClone","primaryPaneHeight","primaryPaneClassName","secondaryPaneClassName","_c","minWidth","maxWidth","minHeight","maxHeight","onePaneStyle","handleBarCloneClassName","join","style","hasDetailPane","defaultProps","Pane","id","classNames","filter","cls","HandleBar","onMouseDown","onTouchStart","getSelection","removeAllRanges","warn"],"mappings":"4KAAA,IAAAA,EAAAC,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,IACAA,EAAA,IAEAC,EAASE,OACPJ,EAAAK,cAACF,EAAAG,QAAG,MACJC,SAASC,eAAe,ibCP1B,IAAAR,EAAAC,EAAA,GAEAQ,EAAAR,EAAA,IAMAS,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YACEF,EAAAI,MAAQ,CACNC,gBAAgB,GAGlBL,EAAAM,MAAyB,KAEzBN,EAAAK,eAAiB,WACfL,EAAKO,SAAS,CACZF,gBAAiBL,EAAKI,MAAMC,kBAIhCL,EAAAQ,uBAAyB,WACvBC,QAAQC,IAAI,YACZD,QAAQC,IAAIV,EAAKM,OAASN,EAAKM,MAAMK,aACrCF,QAAQC,IAAIV,EAAKM,OAASN,EAAKM,MAAMM,YAAYC,IAAIC,aACrDL,QAAQC,IAAIV,EAAKM,OAASN,EAAKM,MAAMS,eAAeF,IAAIG,iBAuD5D,OAxEkBC,EAAAnB,EAAAC,GAoBhBD,EAAAoB,UAAA1B,OAAA,eAAAQ,EAAAE,KACE,OACEd,EAAAK,cAAA,OAAK0B,UAAU,OACb/B,EAAAK,cAAA,OAAK0B,UAAU,oBACb/B,EAAAK,cAACI,EAAAH,QAAQ,CACP0B,SAAS,aACTC,qBAAsBnB,KAAKE,MAAMC,eACjCiB,wBAAwB,EACxBC,eAAgBrB,KAAKM,uBACrBW,UAAU,QACVK,IAAK,SAACC,GAAS,OAAAzB,EAAKM,MAAQmB,IAE5BrC,EAAAK,cAACI,EAAAH,QAAQ,CACP0B,SAAS,WACTM,oBAAoB,OACpBC,oBAAqB,EACrBC,iBAAiB,QACjBL,eAAgBrB,KAAKM,uBACrBqB,gBAAgB,EAChBC,WAAW,EACXC,aAAa,GAEb3C,EAAAK,cAAA,OAAK0B,UAAU,kBACb/B,EAAAK,cAAA,iBACAL,EAAAK,cAAA,sBACAL,EAAAK,cAAA,qBAEFL,EAAAK,cAACI,EAAAH,QAAQ,CACL0B,SAAS,WACTM,oBAAoB,OACpBC,oBAAqB,EACrBC,iBAAiB,QACjBL,eAAgBrB,KAAKM,uBACrBsB,WAAW,GAEX1C,EAAAK,cAAA,OAAK0B,UAAU,kBACb/B,EAAAK,cAAA,iBACAL,EAAAK,cAAA,0BACAL,EAAAK,cAAA,qBAEFL,EAAAK,cAAA,OAAK0B,UAAU,kBAAiB/B,EAAAK,cAAA,oBAGtCL,EAAAK,cAAA,OAAK0B,UAAU,kBACb/B,EAAAK,cAAA,iBACAL,EAAAK,cAAA,+BAOdK,EAxEA,CAAkBV,EAAM4C,WA0ExBC,EAAAvC,QAAeI,iFClFf,IAAAoC,EAAA7C,EAAA,IACA4C,EAAAvC,QAAewC,EAAAC,waCDf,IAAA/C,EAAAC,EAAA,GAKA+C,EAAA/C,EAAA,IACAgD,EAAAhD,EAAA,IACAiD,EAAAjD,EAAA,IAEAA,EAAA,IAEA,IAAA8C,EAAA,SAAApC,GAkBI,SAAAoC,EAAYI,GAAZ,IAAAvC,EACID,EAAAyC,KAAAtC,KAAMqC,IAAMrC,YAoBhBF,EAAAyC,gBAAkB,SAACC,GAMf,GAAiB,IAAbA,EAAEC,SAA2C,IAA3B3C,EAAKuC,MAAMR,YAAjC,CAIA,IACIa,EACAC,EACAC,EAHEC,EAASL,EAAEM,cAKF,cAAXN,EAAEO,MACFJ,EAAUH,EAAEG,QACZC,EAAUJ,EAAEI,SACM,eAAXJ,EAAEO,OACTJ,EAAUH,EAAEQ,QAAQ,GAAGL,QACvBC,EAAUJ,EAAEQ,QAAQ,GAAGJ,SAGvB1D,EAAM+D,SAASC,MAAMpD,EAAKuC,MAAMc,UAAY,GAC5CrD,EAAKsD,QAAQT,EAASC,GAGE,eAAxB9C,EAAKuC,MAAMnB,SACXwB,EAA4BE,EAAUC,EAAOQ,UACd,aAAxBvD,EAAKuC,MAAMnB,WAClBwB,EAA4BC,EAAUE,EAAOS,YAGjDxD,EAAKO,SAAS,CACVkD,YAAY,EACZb,0BAAyBA,IAG7BjD,SAAS+D,iBAAiB,YAAa1D,EAAK2D,iBAC5ChE,SAAS+D,iBAAiB,YAAa1D,EAAK2D,mBAGhD3D,EAAA2D,gBAAkB,SAACjB,GAOf,GAAK1C,EAAKI,MAAMqD,WAAhB,CAIAnB,EAAAsB,cAEM,IAYFf,EACAC,EAbEe,EAAA7D,EAAAI,MACFwC,EAAAiB,EAAAjB,0BACAkB,EAAAD,EAAAC,iBAGEC,EAAA/D,EAAAuC,MACFnB,EAAA2C,EAAA3C,SACAO,EAAAoC,EAAApC,oBACAqC,EAAAD,EAAAC,qBACAlC,EAAAiC,EAAAjC,UAMW,cAAXY,EAAEO,MACFJ,EAAUH,EAAEG,QACZC,EAAUJ,EAAEI,SACM,cAAXJ,EAAEO,OACTJ,EAAUH,EAAEQ,QAAQ,GAAGL,QACvBC,EAAUJ,EAAEQ,QAAQ,GAAGJ,SAG3B,IAAMmB,EACF3B,EAAA4B,oBACI9C,EACAyB,EACAC,EACAgB,EACAlB,EACAoB,EACArC,GAGJG,EACA9B,EAAKO,SAAS,CACV4D,uBAAwBF,EACxBG,MAAOvB,EACPwB,MAAOvB,EACPwB,WAAW,IAGftE,EAAKO,SAAS,CACVgE,YAAaN,EACbG,MAAOvB,EACPwB,MAAOvB,MAKnB9C,EAAAwE,cAAgB,SAAC9B,GAIb,GAAK1C,EAAKI,MAAMqD,WAAhB,CAIM,IAAAI,EAAA7D,EAAAI,MACFwC,EAAAiB,EAAAjB,0BACAwB,EAAAP,EAAAO,MAAOC,EAAAR,EAAAQ,MAAOP,EAAAD,EAAAC,iBAGZC,EAAA/D,EAAAuC,MACFnB,EAAA2C,EAAA3C,SACAO,EAAAoC,EAAApC,oBACAqC,EAAAD,EAAAC,qBACAlC,EAAAiC,EAAAjC,UAGEmC,EACF3B,EAAA4B,oBACI9C,EACAgD,EACAC,EACAP,EACAlB,EACAoB,EACArC,GAGJG,EACA9B,EAAKO,SAAS,CACVkD,YAAY,EACZa,WAAW,EACXC,YAAaN,IAGjBjE,EAAKO,SAAS,CACVkD,YAAY,EACZc,YAAaN,IAIrBtE,SAAS8E,oBAAoB,YAAazE,EAAK2D,iBAC/ChE,SAAS8E,oBAAoB,YAAazE,EAAK2D,iBAIN,mBAA9B3D,EAAKuC,MAAMV,gBAClB6C,OAAOC,cAAc,IAAIC,MAAM,WAIM,oBAA9B5E,EAAKuC,MAAMhB,gBAClBvB,EAAKuC,MAAMhB,iBAGXnC,EAAM+D,SAASC,MAAMpD,EAAKuC,MAAMc,UAAY,GAC5CrD,EAAKsD,QAAQc,EAAOC,KA+I5BrE,EAAAsD,QAAU,SAACuB,EAAmBC,GAI1B,IAAIhB,EACAiB,EACAC,EACAC,EAAUjF,EAAKW,YAAYuE,wBAC3BX,EAAcvE,EAAKY,YAAYuE,iBAAiBD,wBAChDE,EAAgBpF,EAAKqF,UAAUF,iBAAiBD,wBAE9CI,EAAyC,aAAxBtF,EAAKuC,MAAMnB,SAC5BgE,EAAcG,KAAOV,EACrBO,EAAcI,IAAMV,EAGpBW,EAAQ,IAAIC,OAAO,SAEzB,GAA4B,aAAxB1F,EAAKuC,MAAMnB,SAAyB,CAEpC,IAAIuE,EAAc3F,EAAKuC,MAAMb,oBAAoBkE,MAAMH,GAAO,GAAGI,cAC7DC,EAAcC,WAAW/F,EAAKuC,MAAMb,oBAAoBpB,MAAMmF,GAAO,IACzEV,EAAkBE,EAAQe,MAC1BhB,EAAoBT,EAAYgB,KAEZ,MAAhBI,EACA7B,EACImC,KAAKC,MACAnB,GAAmBe,EAAc,KAClCd,GAAqBI,EAAcY,MAAQV,IAE5B,OAAhBK,IACP7B,EACImC,KAAKC,MAAOJ,EAAcd,EAAqBI,EAAcY,YAElE,CACH,IAAIG,EAAenG,EAAKuC,MAAM6D,qBAAqBR,MAAMH,GAAO,GAAGI,cAC/DQ,EAAeN,WAAW/F,EAAKuC,MAAM6D,qBAAqB9F,MAAMmF,GAAO,IAC3EV,EAAkBE,EAAQqB,OAC1BtB,EAAoBT,EAAYiB,IAEX,MAAjBW,EACArC,EACImC,KAAKC,MACAnB,GAAmBsB,EAAe,KACnCrB,GAAqBI,EAAckB,OAAShB,IAE5B,OAAjBa,IACPrC,EACImC,KAAKC,MAAOG,EAAerB,EAAqBI,EAAckB,SAI1EtG,EAAKO,SAAS,CACVuD,iBAAgBA,KA3XpB9D,EAAKI,MAAQ,CACTqD,YAAY,KA6XxB,OAnZ8BxC,EAAAkB,EAAApC,GA0B1BoC,EAAAjB,UAAAqF,kBAAA,WAKI5G,SAAS+D,iBAAiB,UAAWxD,KAAKsE,eAC1C7E,SAAS+D,iBAAiB,WAAYxD,KAAKsE,eAEvCpF,EAAM+D,SAASC,MAAMlD,KAAKqC,MAAMc,UAAY,GAC5CqB,OAAOhB,iBAAiB,SAAUxD,KAAKoD,UA4K/CnB,EAAAjB,UAAA1B,OAAA,iBAkBQgH,EA0DAC,EA5ERzG,EAAAE,KAIU6D,EAAA7D,KAAAqC,MACFc,EAAAU,EAAAV,SAAUjC,EAAA2C,EAAA3C,SACVO,EAAAoC,EAAApC,oBAAqBC,EAAAmC,EAAAnC,iBAAkBF,EAAAqC,EAAArC,oBACvCsC,EAAAD,EAAAC,qBAAsB0C,EAAA3C,EAAA2C,kBAAmBN,EAAArC,EAAAqC,qBACzCjF,EAAA4C,EAAA5C,UAAWwF,EAAA5C,EAAA4C,qBAAsBC,EAAA7C,EAAA6C,uBACjCvF,EAAA0C,EAAA1C,qBAAsBC,EAAAyC,EAAAzC,uBAAwBQ,EAAAiC,EAAAjC,UAAWC,EAAAgC,EAAAhC,YAGvD8E,EAAA3G,KAAAE,MACF+D,EAAA0C,EAAA1C,uBACAI,EAAAsC,EAAAtC,YACAD,EAAAuC,EAAAvC,UAIJ,OAAQlD,GACJ,IAAK,WAEGoF,EADAnF,EACY,CACR2E,MAAO,OACPc,SAAUnF,EACVoF,SAAU,QAEPzF,EACK,CACR0E,MAAO,MACPc,SAAU,EACVC,SAAUrF,GAGF,CACRsE,MAAOzB,EAAiBA,EAAW,KAAO3C,EAC1CkF,SAAUnF,EACVoF,SAAUrF,GAGlB,MAEJ,IAAK,aAEG8E,EADAnF,EACY,CACRiF,OAAQ,OACRU,UAAW,EACXC,UAAW,QAER3F,EACK,CACRgF,OAAQ,MACRU,UAAW,EACXC,UAAWb,GAGH,CACRE,OAAQ/B,EAAiBA,EAAW,KAAOmC,EAC3CM,UAAWhD,EACXiD,UAAWb,GAGnB,MAEJ,QACI,OAAO,KAGf,IAAK/C,EAAS,GACV,IAAI6D,EAAoB,CACpBlB,MAAO,OACPe,SAAU,OACVT,OAAQ,QAKZlH,EAAM+D,SAASC,MAAMC,GAAY,GAAKvB,KACxB+B,EAAA,IACI,aAAbzC,EAA0B,OAAS,OAAQ+C,EAAyB,KADzEsC,KAKJ,IAAMU,EAA0B,CAC5B,8BACc,aAAb/F,EAA0B,WAAa,cAC1CgG,KAAK,KAEP,OACIhI,EAAAK,cAAA,OACI0B,UAAW,aAAyB,aAAbC,EAA0B,WAAa,cAAY,KAAID,GAAa,IAC3FkG,MAAwB,cAAjBH,EAA+BA,EAAe,KACrD1F,IAAK,SAACC,GAAyB,OAAAzB,EAAKW,YAAcc,IAElDrC,EAAAK,cAAC2C,EAAA1C,QAAI,CACDyB,UAAW,YAAWwF,GAAwB,IAC9CvF,SAAUA,EACViG,MAAOb,EACPhF,IAAK,SAACC,GAAe,OAAAzB,EAAKY,YAAca,IAEtC4B,EAAS,GAAgBA,EAAS,GAApBA,GAIhBA,EAAS,GACHjE,EAAAK,cAAC4C,EAAA3C,QAAS,CACR0B,SAAUA,EACVqB,gBAAiBvC,KAAKuC,gBACtBjB,IAAK,SAACC,GAAoB,OAAAzB,EAAKqF,UAAY5D,GAC3CM,YAAaA,IAEf,KAIND,GAAawC,EACPlF,EAAAK,cAAA,OACE4H,MAAOZ,EACPtF,UAAWgG,IAEb,KAIN9D,EAAS,GACHjE,EAAAK,cAAC2C,EAAA1C,QAAI,CACHyB,UAAWyF,GAA0B,GACrCxF,SAAUA,EACVkG,cAAepH,KAAKqC,MAAM+E,cAC1B9F,IAAK,SAACC,GAAe,OAAAzB,EAAKe,eAAiBU,IAE1C4B,EAAS,IAEZ,OAnVRlB,EAAAoF,aAAuC,CACjDnG,SAAU,WACVU,WAAW,EACXD,gBAAgB,EAChBH,oBAAqB,MACrBC,oBAAqB,IACrBC,iBAAkB,MAClBwE,qBAAsB,MACtBpC,qBAAsB,IACtB0C,kBAAmB,OAyY3BvE,EAnZA,CAA8B/C,EAAM4C,WAAvBC,EAAAE,0aCXb,IAAA/C,EAAAC,EAAA,GAGAmI,EAAA,SAAAzH,GAAA,SAAAyH,IAAA,IAAAxH,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YAyBIF,EAAAmF,eAAiB,WACb,OAAOnF,EAAKa,OAEpB,OA5BmBI,EAAAuG,EAAAzH,GAGfyH,EAAAtG,UAAA1B,OAAA,eAAAQ,EAAAE,KACU2D,EAAA3D,KAAAqC,MAAE+E,EAAAzD,EAAAyD,cAAeG,EAAA5D,EAAA4D,GAAIJ,EAAAxD,EAAAwD,MAErBK,EAAa,CACf,OACAJ,GAAiB,qBAJazD,EAAAzC,SAAUyC,EAAA1C,WAO1CwG,OAAO,SAACC,GAAQ,OAAAA,IAAKR,KAAK,KAE5B,OACIhI,EAAAK,cAAA,OACIgI,GAAIA,EACJjG,IAAK,SAACC,GAAyB,OAAAzB,EAAKa,IAAMY,GAC1CN,UAAWuG,EACXL,MAAOA,GAENnH,KAAKqC,MAAMc,WAQ5BmE,EA5BA,CAAmBpI,EAAM4C,WA8BzBC,EAAAvC,QAAe8H,iaCjCf,IAAApI,EAAAC,EAAA,GAGAwI,EAAA,SAAA9H,GAAA,SAAA8H,IAAA,IAAA7H,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YA4BIF,EAAAmF,eAAiB,WACb,OAAOnF,EAAKa,OAEpB,OA/BwBI,EAAA4G,EAAA9H,GAOpB8H,EAAA3G,UAAA1B,OAAA,eAAAQ,EAAAE,KACU2D,EAAA3D,KAAAqC,MAAEnB,EAAAyC,EAAAzC,SAAUqB,EAAAoB,EAAApB,gBAEZiF,EAAa,CACf,aACAtG,GAJ+ByC,EAAA9B,aAKf,sBAClB4F,OAAO,SAACC,GAAQ,OAAAA,IAAKR,KAAK,KAE5B,OACIhI,EAAAK,cAAA,OACI0B,UAAWuG,EACXlG,IAAK,SAACC,GAAyB,OAAAzB,EAAKa,IAAMY,GAC1CqG,YAAa,SAACpF,GAAM,OAAAD,EAAgBC,IACpCqF,aAAc,SAACrF,GAAM,OAAAD,EAAgBC,KAErCtD,EAAAK,cAAA,QAAM0B,UAAU,sBAtBrB0G,EAAAN,aAAwC,CAC3CxF,aAAa,GA6BrB8F,EA/BA,CAAwBzI,EAAM4C,WAiC9BC,EAAAvC,QAAemI,iFCpCf5F,EAAA2B,YAAA,WACI,IACIc,OAAOsD,eAAeC,kBACxB,MAAOvF,GACLjC,QAAQyH,KAAKxF,KAIrBT,EAAAiC,oBAAA,SAEI9C,EAAkBgD,EAAeC,EACjCP,EAA0BlB,EAC1BoB,EAA8BrC,GAG9B,IAAIsC,EAEJ,OAAQ7C,GACJ,IAAK,aAEG6C,EADAI,EAAQP,EACcA,EAAmBlB,EACjCyB,EAAQzB,GAA8BoB,EACxBA,EAAuB,KAEvBK,EAAQzB,EAElC,MAEJ,IAAK,WACL,QAEQqB,EADAG,GAASN,EACaA,EAAmBlB,EACjCwB,EAAQxB,GAA8BjB,EACxBA,EAAsB,KAEtByC,EAAQxB,EAM1C,OAAOqB","file":"static/js/main.20a12729.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);","import * as React from 'react';\n\nimport Splitter from './components/Splitters';\n\ninterface AppState {\n  maxPrimaryPane?: Boolean;\n}\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    maxPrimaryPane: false\n  };\n\n  split: Splitter | null = null;\n\n  maxPrimaryPane = () => {\n    this.setState({\n      maxPrimaryPane: !this.state.maxPrimaryPane\n    });\n  }\n\n  onDragFinishedCallback = () => {\n    console.log('callback');\n    console.log(this.split && this.split.paneWrapper); // actual div\n    console.log(this.split && this.split.panePrimary.div.clientWidth);\n    console.log(this.split && this.split.paneNotPrimary.div.clientHeight);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"splitter-wrapper\">\n          <Splitter\n            position=\"horizontal\"\n            maximizedPrimaryPane={this.state.maxPrimaryPane}\n            minimalizedPrimaryPane={false}\n            onDragFinished={this.onDragFinishedCallback}\n            className=\"split\"\n            ref={(node) => this.split = node}\n          >\n            <Splitter\n              position=\"vertical\"\n              primaryPaneMaxWidth=\"100%\"\n              primaryPaneMinWidth={0}\n              primaryPaneWidth=\"400px\"\n              onDragFinished={this.onDragFinishedCallback}\n              dispatchResize={true}\n              postPoned={true}\n              allowResize={true}\n            >\n              <div className=\"placeholder _1\">\n                <span>1</span>\n                <p>postponed</p>\n                <p>primary</p>\n              </div>\n              <Splitter\n                  position=\"vertical\"\n                  primaryPaneMaxWidth=\"100%\"\n                  primaryPaneMinWidth={0}\n                  primaryPaneWidth=\"400px\"\n                  onDragFinished={this.onDragFinishedCallback}\n                  postPoned={false}\n              >\n                  <div className=\"placeholder _2\">\n                    <span>2</span>\n                    <p>normal resize</p>\n                    <p>primary</p>\n                  </div>\n                  <div className=\"placeholder _3\"><span>3</span></div>\n              </Splitter> \n            </Splitter>\n            <div className=\"placeholder _4\">\n              <span>4</span>\n              <p>normal resize</p>\n            </div>\n          </Splitter>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { Splitter } from './Splitter';\nexport default Splitter;","import * as React from 'react';\n\n/********************************\n* import files needed for splitter to work\n********************************/\nimport Pane from './Pane';\nimport HandleBar from './HandleBar';\nimport { unselectAll, getPrimaryPaneWidth } from './Helpers';\nimport { SplitterProps, SplitterState } from './typings/index';\nimport './splitters.css';\n\nexport class Splitter extends React.Component<SplitterProps, SplitterState> {\n    public static defaultProps: Partial<SplitterProps> = {\n        position: 'vertical',\n        postPoned: false,\n        dispatchResize: false,\n        primaryPaneMaxWidth: '80%',\n        primaryPaneMinWidth: 300,\n        primaryPaneWidth: '50%',\n        primaryPaneMaxHeight: '80%',\n        primaryPaneMinHeight: 300,\n        primaryPaneHeight: '50%'\n    };\n\n    panePrimary: Pane;\n    paneNotPrimary: Pane;\n    handlebar: HandleBar;\n    paneWrapper: HTMLDivElement;\n\n    constructor(props: SplitterProps) {\n        super(props);\n\n        this.state = {\n            isDragging: false\n        };\n    }\n\n    componentDidMount() {\n        /********************************\n        * Sets event listeners after component is mounted.\n        * If there is only one pane, the resize event listener won't be added\n        ********************************/\n        document.addEventListener('mouseup', this.handleMouseUp);\n        document.addEventListener('touchend', this.handleMouseUp);\n\n        if (React.Children.count(this.props.children) > 1) {\n            window.addEventListener('resize', this.getSize);\n        }\n    }\n\n    handleMouseDown = (e: any) => {\n        /********************************\n        * If the right button was clicked - stop the function\n        * If there is more then one pane, we get the sizes of panes + max pos of mouse in splitter\n        * add event listener for touch move and mouse move\n        ********************************/\n        if (e.button === 2 || this.props.allowResize === false) {\n            return;\n        }\n\n        const target = e.currentTarget;\n        let handleBarOffsetFromParent;\n        let clientX;\n        let clientY;\n\n        if (e.type === 'mousedown') {\n            clientX = e.clientX;\n            clientY = e.clientY;\n        } else if (e.type === 'touchstart') {\n            clientX = e.touches[0].clientX;\n            clientY = e.touches[0].clientY;\n        }\n\n        if (React.Children.count(this.props.children) > 1) {\n            this.getSize(clientX, clientY);\n        }\n\n        if (this.props.position === 'horizontal') {\n            handleBarOffsetFromParent = clientY - target.offsetTop;\n        } else if (this.props.position === 'vertical') {\n            handleBarOffsetFromParent = clientX - target.offsetLeft;\n        }\n\n        this.setState({\n            isDragging: true,\n            handleBarOffsetFromParent\n        });\n\n        document.addEventListener('mousemove', this.handleMouseMove);\n        document.addEventListener('touchmove', this.handleMouseMove);\n    }\n\n    handleMouseMove = (e: any) => {\n        /********************************\n        * check if the state is still isDragging, if not, stop the function\n        * unselectAll - unselect all selected text\n        * check position of mouse in the splitter and and set the width or height of primary pane\n        * save last positions of X and Y coords (that is necessary for touch screen)\n        ********************************/\n        if (!this.state.isDragging) {\n            return;\n        }\n        \n        unselectAll();\n\n        const {\n            handleBarOffsetFromParent,\n            maxMousePosition\n        } = this.state;\n\n        const {\n            position,\n            primaryPaneMinWidth,\n            primaryPaneMinHeight,\n            postPoned\n        } = this.props;\n\n        let clientX;\n        let clientY;\n\n        if (e.type === 'mousemove') {\n            clientX = e.clientX;\n            clientY = e.clientY;\n        } else if (e.type === 'touchmove') {\n            clientX = e.touches[0].clientX;\n            clientY = e.touches[0].clientY;\n        }\n\n        const primaryPanePosition =\n            getPrimaryPaneWidth(\n                position,\n                clientX,\n                clientY,\n                maxMousePosition,\n                handleBarOffsetFromParent,\n                primaryPaneMinHeight,\n                primaryPaneMinWidth\n            );\n\n        if (postPoned) {\n            this.setState({\n                handleBarClonePosition: primaryPanePosition,\n                lastX: clientX,\n                lastY: clientY,\n                isVisible: true\n            });\n        } else {\n            this.setState({\n                primaryPane: primaryPanePosition,\n                lastX: clientX,\n                lastY: clientY\n            });\n        }\n    }\n\n    handleMouseUp = (e: any) => {\n        /********************************\n        * Dispatch event is for components which resizes on window resize\n        ********************************/\n        if (!this.state.isDragging) {\n            return;\n        }\n\n        const {\n            handleBarOffsetFromParent,\n            lastX, lastY, maxMousePosition\n        } = this.state;\n\n        const {\n            position,\n            primaryPaneMinWidth,\n            primaryPaneMinHeight,\n            postPoned\n        } = this.props;\n\n        const primaryPanePosition =\n            getPrimaryPaneWidth(\n                position,\n                lastX,\n                lastY,\n                maxMousePosition,\n                handleBarOffsetFromParent,\n                primaryPaneMinHeight,\n                primaryPaneMinWidth\n            );\n\n        if (postPoned) {\n            this.setState({\n                isDragging: false,\n                isVisible: false,\n                primaryPane: primaryPanePosition\n            });\n        } else {\n            this.setState({\n                isDragging: false,\n                primaryPane: primaryPanePosition\n            });\n        }\n\n        document.removeEventListener('mousemove', this.handleMouseMove);\n        document.removeEventListener('touchmove', this.handleMouseMove);\n\n        // call resize event to trigger method for updating of DataGrid width\n        // TODO: add this event for IE11\n        if (typeof this.props.dispatchResize === 'boolean') {\n            window.dispatchEvent(new Event('resize'));\n        }\n\n        // callback function from parent component\n        if (typeof this.props.onDragFinished === 'function') {\n            this.props.onDragFinished();\n        }\n\n        if (React.Children.count(this.props.children) > 1) {\n            this.getSize(lastX, lastY);\n        }\n    }\n\n    render() {\n        /********************************\n         * set width of primary pane according to props, or state\n        ********************************/\n        const {\n            children, position,\n            primaryPaneMinWidth, primaryPaneWidth, primaryPaneMaxWidth,\n            primaryPaneMinHeight, primaryPaneHeight, primaryPaneMaxHeight,\n            className, primaryPaneClassName, secondaryPaneClassName,\n            maximizedPrimaryPane, minimalizedPrimaryPane, postPoned, allowResize\n        } = this.props;\n\n        const {\n            handleBarClonePosition,\n            primaryPane,\n            isVisible\n        } = this.state;\n\n        let paneStyle;\n        switch (position) {\n            case 'vertical': {\n                if (maximizedPrimaryPane) {\n                    paneStyle = {\n                        width: '100%',\n                        minWidth: primaryPaneMinWidth,\n                        maxWidth: '100%'\n                    };\n                } else if (minimalizedPrimaryPane) {\n                    paneStyle = {\n                        width: '0px',\n                        minWidth: 0,\n                        maxWidth: primaryPaneMaxWidth\n                    };\n                } else {\n                    paneStyle = {\n                        width: primaryPane ? `${primaryPane}px` : primaryPaneWidth,\n                        minWidth: primaryPaneMinWidth,\n                        maxWidth: primaryPaneMaxWidth\n                    };\n                }\n                break;\n            }\n            case 'horizontal': {\n                if (maximizedPrimaryPane) {\n                    paneStyle = {\n                        height: '100%',\n                        minHeight: 0,\n                        maxHeight: '100%'\n                    };\n                } else if (minimalizedPrimaryPane) {\n                    paneStyle = {\n                        height: '0px',\n                        minHeight: 0,\n                        maxHeight: primaryPaneMaxHeight\n                    };\n                } else {\n                    paneStyle = {\n                        height: primaryPane ? `${primaryPane}px` : primaryPaneHeight,\n                        minHeight: primaryPaneMinHeight,\n                        maxHeight: primaryPaneMaxHeight\n                    };\n                }\n                break;\n            }\n            default:\n                return null;\n        }\n\n        if (!children[1]) {\n            var onePaneStyle: any = {\n                width: '100%',\n                maxWidth: '100%',\n                height: '100%'\n            };\n        }\n\n        let handlebarClone;\n        if (React.Children.count(children) > 1 && postPoned) {\n            handlebarClone = {\n                [position === 'vertical' ? 'left' : 'top']: handleBarClonePosition + 'px'\n            };\n        }\n\n        const handleBarCloneClassName = [\n            'handle-bar handle-bar_clone',\n             position === 'vertical' ? 'vertical' : 'horizontal',\n        ].join(' ');\n\n        return (\n            <div\n                className={`splitter ${position === 'vertical' ? 'vertical' : 'horizontal'} ${className || ''}`}\n                style={onePaneStyle !== 'undefined' ? onePaneStyle : null}\n                ref={(node: HTMLDivElement) => this.paneWrapper = node}\n            >\n                <Pane\n                    className={`primary ${primaryPaneClassName || ''}`}\n                    position={position}\n                    style={paneStyle}\n                    ref={(node: Pane) => this.panePrimary = node}\n                >\n                    {!children[1] ? children : children[0]}\n                </Pane>\n\n                {\n                    children[1]\n                        ? <HandleBar\n                            position={position}\n                            handleMouseDown={this.handleMouseDown}\n                            ref={(node: HandleBar) => this.handlebar = node}\n                            allowResize={allowResize}\n                        />\n                        : null\n                }\n\n                {\n                    postPoned && isVisible\n                        ? <div\n                            style={handlebarClone}\n                            className={handleBarCloneClassName}\n                        />\n                        : null\n                }\n\n                {\n                    children[1]\n                        ? <Pane\n                            className={secondaryPaneClassName || ''}\n                            position={position}\n                            hasDetailPane={this.props.hasDetailPane}\n                            ref={(node: Pane) => this.paneNotPrimary = node}\n                        >\n                            {children[1]}\n                        </Pane>\n                        : null\n                }\n            </div>\n        );\n    }\n\n    getSize = (cX?: Number | any, cY?: Number | any) => {\n        /********************************\n        * This function calculates the max position of a mouse in the current splitter from given percentage.\n        /********************************/\n        let maxMousePosition;\n        let nodeWrapperSize;\n        let primaryPaneOffset;\n        let wrapper = this.paneWrapper.getBoundingClientRect();\n        let primaryPane = this.panePrimary.getDivInstance().getBoundingClientRect();\n        let handleBarSize = this.handlebar.getDivInstance().getBoundingClientRect();\n\n        const posInHandleBar = this.props.position === 'vertical' \n            ? handleBarSize.left - cX\n            : handleBarSize.top - cY;\n\n        // find only letters from string\n        const regEx = new RegExp(/\\D+/gi);\n         \n        if (this.props.position === 'vertical') {\n            // split the maxWidth/maxHeight string to string and numbers\n            let maxWidthStr = this.props.primaryPaneMaxWidth.match(regEx)[0].toLowerCase();\n            let maxWidthNum = parseFloat(this.props.primaryPaneMaxWidth.split(regEx)[0]);\n            nodeWrapperSize = wrapper.width;\n            primaryPaneOffset = primaryPane.left;\n\n            if (maxWidthStr === '%') {\n                maxMousePosition =\n                    Math.floor(\n                        (nodeWrapperSize * (maxWidthNum / 100)) +\n                        primaryPaneOffset - (handleBarSize.width + posInHandleBar)\n                    );\n            } else if (maxWidthStr === 'px') {\n                maxMousePosition =\n                    Math.floor((maxWidthNum + primaryPaneOffset) - handleBarSize.width);\n            }\n        } else {\n            let maxHeightStr = this.props.primaryPaneMaxHeight.match(regEx)[0].toLowerCase();\n            let maxHeightNum = parseFloat(this.props.primaryPaneMaxHeight.split(regEx)[0]);\n            nodeWrapperSize = wrapper.height;\n            primaryPaneOffset = primaryPane.top;\n\n            if (maxHeightStr === '%') {\n                maxMousePosition =\n                    Math.floor(\n                        (nodeWrapperSize * (maxHeightNum / 100)) +\n                        primaryPaneOffset - (handleBarSize.height + posInHandleBar)\n                    );\n            } else if (maxHeightStr === 'px') {\n                maxMousePosition =\n                    Math.floor((maxHeightNum + primaryPaneOffset) - handleBarSize.height);\n            }\n        }\n\n        this.setState({\n            maxMousePosition\n        });\n    }\n}","import * as React from 'react';\nimport { PaneProps } from './typings/index';\n\nclass Pane extends React.Component<PaneProps, {}> {\n    div: HTMLDivElement;\n\n    render() {\n        const { hasDetailPane, id, style, position, className } = this.props;\n\n        const classNames = [\n            'pane',\n            hasDetailPane && 'bottom-detail-pane',\n            position,\n            className\n        ].filter((cls) => cls).join(' ');\n\n        return (\n            <div\n                id={id}\n                ref={(node: HTMLDivElement) => this.div = node}\n                className={classNames}\n                style={style}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n\n    getDivInstance = () => {\n        return this.div;\n    }\n}\n\nexport default Pane;","import * as React from 'react';\nimport { HandleBarProps } from './typings/index';\n\nclass HandleBar extends React.Component<HandleBarProps, {}> {\n    static defaultProps: Partial<HandleBarProps> = {\n        allowResize: true\n    };\n\n    div: HTMLDivElement;\n\n    render() {\n        const { position, handleMouseDown, allowResize } = this.props;\n\n        const classNames = [\n            'handle-bar',\n            position,\n            !allowResize && 'resize-not-allowed',\n        ].filter((cls) => cls).join(' ');\n\n        return (\n            <div \n                className={classNames} \n                ref={(node: HTMLDivElement) => this.div = node}\n                onMouseDown={(e) => handleMouseDown(e)} \n                onTouchStart={(e) => handleMouseDown(e)}\n            >\n                <span className=\"handle-bar_drag\" />\n            </div>\n        );\n    }\n\n    getDivInstance = () => {\n        return this.div;\n    }\n}\n\nexport default HandleBar;","export function unselectAll() {\n    try {\n        window.getSelection().removeAllRanges();\n    } catch (e) {\n        console.warn(e);\n    }\n}\n\nexport function getPrimaryPaneWidth\n    (\n    position: string, lastX: number, lastY: number,\n    maxMousePosition: number, handleBarOffsetFromParent: number,\n    primaryPaneMinHeight: number, primaryPaneMinWidth: number\n    ): number {\n\n    let primaryPanePosition;\n\n    switch (position) {\n        case 'horizontal': {\n            if (lastY > maxMousePosition) {\n                primaryPanePosition = maxMousePosition - handleBarOffsetFromParent;\n            } else if ((lastY - handleBarOffsetFromParent) <= primaryPaneMinHeight) {\n                primaryPanePosition = primaryPaneMinHeight + 0.001;\n            } else {\n                primaryPanePosition = lastY - handleBarOffsetFromParent;\n            }\n            break;\n        }\n        case 'vertical':\n        default: {\n            if (lastX >= maxMousePosition) {\n                primaryPanePosition = maxMousePosition - handleBarOffsetFromParent;\n            } else if ((lastX - handleBarOffsetFromParent) <= primaryPaneMinWidth) {\n                primaryPanePosition = primaryPaneMinWidth + 0.001;\n            } else {\n                primaryPanePosition = lastX - handleBarOffsetFromParent;\n            }\n            break;\n        }\n    }\n\n    return primaryPanePosition;\n}"],"sourceRoot":""}